diff --git a/autoload/codefmt/gofmt.vim b/autoload/codefmt/gofmt.vim
index da4aad6..d585c7b 100644
--- a/autoload/codefmt/gofmt.vim
+++ b/autoload/codefmt/gofmt.vim
@@ -35,10 +35,16 @@ function! codefmt#gofmt#GetFormatter() abort
 
   ""
   " Reformat the current buffer with gofmt or the binary named in
-  " @flag(gofmt_executable), only targeting the range between {startline} and
+  " @flag(gofmt_executable) @flag(gofmt_args), only targeting the range between {startline} and
   " {endline}.
   function l:formatter.FormatRange(startline, endline) abort
-    let l:cmd = [ s:plugin.Flag('gofmt_executable') ]
+    let l:cmd = [ s:plugin.Flag('gofmt_executable'),  ]
+
+    let l:args = s:plugin.Flag('gofmt_args')
+    if !empty(l:args)
+      let l:cmd += split(l:args)
+    endif
+
     try
       " gofmt does not support range formatting.
       " TODO: File a feature request with gofmt and link it here.
diff --git a/instant/flags.vim b/instant/flags.vim
index 900f673..cffa1b3 100644
--- a/instant/flags.vim
+++ b/instant/flags.vim
@@ -72,6 +72,12 @@ call s:plugin.Flag('clang_format_style', 'file')
 " additionally adjust imports when formatting.
 call s:plugin.Flag('gofmt_executable', 'gofmt')
 
+""
+" The args for the gofmt executable. For example, this can append arguments to
+" "goimports" (https://godoc.org/golang.org/x/tools/cmd/goimports) to
+" additionally arguments of executable when formatting.
+call s:plugin.Flag('gofmt_args', '')
+
 ""
 " The path to the dartfmt executable.
 call s:plugin.Flag('dartfmt_executable', 'dartfmt')
