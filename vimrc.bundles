" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   flake8

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'tmux', 'golang', 'ruby', 'less']
    let g:bundle_groups=['python', 'tmux', 'golang']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" vim-misc 提供一些vimscript的接口(e.g: join, is_mac, ...)
" Plug 'xolox/vim-misc'
" vital.vim 用于vimscript的一些函数
" Plug 'vim-jp/vital.vim'

" 异步lint组件
Plug 'w0rp/ale', { 'for': ['python', 'go', 'proto', 'ansible', 'c', 'cpp', 'json', 'rust' ] }
Plug 'ambv/black', { 'for': ['python'], 'do': 'git apply ../../others/black_virtualenv_patch' }

" auto complete
" 代码自动补全
" completor for vim8
" Plug 'maralla/completor.vim', {'do': 'make js'}
" completor.vim 目前有问题不可使用, 暂用YCM代替
let YCM_COMPILE_COMMAND = './install.py --clang-completer --go-completer --java-completer --system-libclang'
Plug 'Valloric/YouCompleteMe', { 'frozen': 1, 'do': YCM_COMPILE_COMMAND, 'for': ['python', 'c', 'cpp'] }

" 自动配对补全符号`e.g: (,[,{,',"`
" Plug 'jiangmiao/auto-pairs'
" 自动补全html/xml标签
" Plug 'docunext/closetag.vim', { 'for': ['html', 'xml', 'javascript', 'jsx'] }

" 自动进入粘贴模式
" Plug 'roxma/vim-paste-easy'

" 高亮选中单词
" Plug 't9md/vim-quickhl'

" 高亮模式匹配并提供preview
Plug 'markonm/traces.vim'

" quick edit
" 快速注释
" Plug 'scrooloose/nerdcommenter' WARNING!! make vim very slow in input mode
" if open too many buffers.(about 50)
Plug 'tpope/vim-commentary'

" 增强<C-a>/<C-x>可以作用于日期
" Plug 'tpope/vim-speeddating'

" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
" Plug 'bronson/vim-trailing-whitespace'
Plug 'ntpeters/vim-better-whitespace'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
" Plug 'unblevable/quick-scope'

" 增强配对能力, 并提供高亮
Plug 'andymass/vim-matchup'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'
" Plug 'Yilin-Yang/vim-markbar'

" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" fzf better than ctrlp (more faster and without cache)
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" vim-grepper
" Plug 'mhinz/vim-grepper'

" vim启动页面增强
Plug 'mhinz/vim-startify'

" eunuch
" Plug 'tpope/vim-eunuch'

" git
" fugitive
" Plug 'tpope/vim-fugitive'
" gitgutter
" Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'

" 增强 ["\@\<C-r>] (vim寄存器)
" Plug 'junegunn/vim-peekaboo'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline', { 'do': 'git apply ../../others/airline_branch_cached_patch' }
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'

" 语法高亮
" ansible
" Plug 'pearofducks/ansible-vim', { 'for': ['ansible'], 'do': 'cd ./UltiSnips; ./generate.py' }
" c/cpp
" Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['cpp', 'c'] }
" cmake
" git
Plug 'tpope/vim-git', { 'for': ['git'] }
" fish
" Plug 'dag/vim-fish', { 'for': ['sh', 'fish'] }
" haskell
" Plug 'neovimhaskell/haskell-vim', { 'for': ['haskell'] }
" html
" Plug 'othree/html5.vim', { 'for': ['html'] }
" json
" Plug 'elzr/vim-json', { 'for': ['json'] }
" less
" Plug 'groenewege/vim-less', { 'for': ['less'] }
" lua
" Plug 'tbastos/vim-lua', { 'for': ['lua'] }
" nginx
" Plug 'chr4/nginx.vim', { 'for': ['nginx'] }
" protobuf
" Plug 'uarun/vim-protobuf', { 'for': ['proto'] }
" thrift
" Plug 'solarnz/thrift.vim', { 'for': ['thrift'] }
" tmux
" Plug 'ericpruitt/tmux.vim', { 'for': ['tmux'], 'rtp': 'vim/' }
" typescript
" Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }
" yaml
" Plug 'stephpy/vim-yaml', { 'for': ['yaml'] }
" kotlin
" Plug 'udalov/kotlin-vim', { 'for': ['kotlin'] }
" rust
" Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
" let g:rustfmt_autosave = 1

" Plug 'yogorobot/bitproto', { 'rtp': 'vim/' , 'for': ['bitproto'] }

" Plug 'flazz/vim-colorschemes'
" molokai
" 主题 molokai
" Plug 'tomasr/molokai'
" tomorrow
" 主题 tomorrow
" Plug 'chriskempson/vim-tomorrow-theme'
" onedark
" 主题 onedark
" Plug 'joshdick/onedark.vim'
" monokai
" 主题 monokai
" Plug 'sickill/vim-monokai'
" vim-hybird
" 主题 vim-hybird
" Plug 'w0ng/vim-hybrid'
" jellybeans.vim
" 主题 jellybeans.vim
" Plug 'nanotech/jellybeans.vim'
" vim-kolor
" 主题 vim-kolor
" Plug 'zeis/vim-kolor'
" vim-lucius
" 主题 vim-lucius
" Plug 'jonathanfilip/vim-lucius'
" iceberg.vim
" 主题 iceberg.vim
" Plug 'cocopon/iceberg.vim'
" tender.vim
" 主题 tender.vim
Plug 'jacoborus/tender.vim'
" gruvbox
" 主题 gruvbox
" Plug 'morhetz/gruvbox'
" space-vim-dark
" 主题space-vim-dark
" Plug 'liuchengxu/space-vim-dark'

" nav
" nerdtree nerdtree-git-plugin
Plug 'scrooloose/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin'
" tagbar
" Plug 'majutsushi/tagbar'
" window resize
Plug 'simeji/winresizer'
" buffer operation improve
Plug 'qpkorr/vim-bufkill'

" targets.vim 添加更多的文本对象支持
Plug 'wellle/targets.vim'
" vim-sendwich 修改选中文本对象的环绕字符
Plug 'machakann/vim-sandwich'  " sa[添加环绕字符], sd[删除环绕字符], sr[替换环绕字符]
" vim-abolish转换CamelCase与Snake
" Plug 'tpope/vim-abolish'
" Plug 'chaoren/vim-wordmotion'

" wakatime
" Plug 'wakatime/vim-wakatime'
" let g:wakatime_ScreenRedraw = 0 " disable redraw screen after sending heartbeats


if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
    " Plug 'tmux-plugins/vim-tmux-focus-events'
endif

if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo  https://github.com/fatih/vim-go
    Plug 'fatih/vim-go', { 'tag': 'v1.19', 'frozen': 1, 'do': 'GoUpdateBinaries' }

    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_fail_silently = 1
    let g:go_fmt_command = "gofmt"
    let g:go_doc_keywordprg_enabled = 0 " disable GoDoc
endif


if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax', {'for': 'python'}
    let g:python_highlight_all = 1
    let g:python_highlight_file_headers_as_comments = 1
    let g:python_slow_sync = 1
    " has bug if "{{" was present and not close with "}}"
    " Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
    Plug 'hattya/python-indent.vim', {'for': 'python'}  " working fine.
    Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'python'}
endif

if count(g:bundle_groups, 'javascript')
    " javascript
    " 注意: syntax这个插件要放前面
    " Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
    " Plug 'othree/es.next.syntax.vim'
    Plug 'jelera/vim-javascript-syntax', {'for': ['javascript', 'jsx']} | Plug 'pangloss/vim-javascript', {'for': ['javascript', 'jsx']}
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"

    let g:javascript_plugin_flow = 1
    let g:jsx_ext_required = 0

    let g:used_javascript_libs = 'React,Flux'
    " Plug 'maxmellon/vim-jsx-pretty', {'for': ['javascript', 'jsx']}
    Plug 'chemzqm/vim-jsx-improve', {'for': ['javascript', 'jsx']} " FIXME 会导致js缩进出问题
    " let g:vim_jsx_pretty_colorful_config = 1
    " Plug 'mxw/vim-jsx' " FIXME 如果打开，validator.vim不能正常检查javascript

    " TODO: jquery? for, remove or keep
    Plug 'othree/javascript-libraries-syntax.vim', {'for': ['javascript', 'jsx']}

    " for tagbar
    " Plug 'ternjs/tern_for_vim', {'do': 'npm install && npm install -g git+https://github.com/ramitos/jsctags.git', 'for': ['javascrip', 'jsx']}
endif

if count(g:bundle_groups, 'kotlin')
  " ##### kotlin syntax #####

endif

" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################

" ale {{{
    " Only run linters named in ale_linters settings.
    let g:ale_linters_explicit = 1

    " pip install ansible-lint
    " brew install cppcheck
    " npm install jsonlint -g
    let g:ale_linters = {
          \  'go': ['gofmt', 'govet', 'gochecknoinits', 'goimport', 'gotype', 'misspell'],
          \  'proto': ['prototool'],
          \  'python': ['black', 'vulture'],
          \  'ansible': ['ansible-lint'],
          \  'c': ['cppcheck', 'clang'],
          \  'cpp': ['cppcheck', 'clang'],
          \  'json': ['jsonlint'],
          \  'sh': ['shellcheck'],
          \  'rust': ['rls'],
          \}
    let g:ale_python_vulture_options = '--min-confidence 80 --ignore-names "_ign*" --exclude "*py2.py,*py2_grpc.py"'
    let g:ale_python_mypy_options =
          \ '--ignore-missing-imports --follow-imports skip --disallow-untyped-defs'.' '.
          \ '--disallow-untyped-decorators --strict-optional --warn-unused-ignores'.' '.
          \ '--no-implicit-optional --warn-redundant-casts'
    " Only run fixers anemd in ale_fixers settings.
    " npm install -g prettier
    " let g:ale_fixers_explicit = 1
    " let g:ale_fixers = {
          " \}
    " let g:ale_fix_on_save = 1

    let g:ale_sign_column_always = 1

    let g:ale_sign_error = "\uf05e"
    let g:ale_sign_warning = "\uf071"

    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%]% code:% %s [%severity%] '

    let g:ale_rust_rls_toolchain = 'stable'

    " let g:ale_lint_on_text_changed = 'normal'
    " let g:ale_lint_delay = 200 " ms
    " let g:ale_lint_on_enter = 1
    " let g:ale_lint_on_save = 1

    augroup ale_hightlight_group
      autocmd!
      autocmd ColorScheme * highlight ALEErrorSign cterm=bold ctermbg=none  ctermfg=red
      autocmd ColorScheme * highlight ALEWarningSign cterm=bold ctermbg=none  ctermfg=darkmagenta
    augroup END
" }}}

" black {{{
    let g:black_virtualenv = '' . $VIRTUAL_ENV
    augroup black_group
      autocmd!
      autocmd BufWritePre *.py silent! Black
    augroup END
" }}}

" ################### 自动补全 ###################

" YouCompleteMe {{{
    let g:ycm_python_binary_path = 'python'
    let g:ycm_key_list_select_completion = ['<C-P>', '<C-N>']
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_key_invoke_completion = '<C-C>'
    " vertical-split | new-or-existing-tab
    let g:ycm_goto_buffer_command = 'new-or-existing-tab'
    let g:ycm_complete_in_comments = 0
    let g:ycm_auto_trigger = 1

    let g:ycm_global_ycm_extra_conf = '$HOME/.vim/others/.ycm_extra_conf.py'
" }}}

" vim-quickhl {{{
    nmap <leader>w <Plug>(quickhl-manual-this-whole-word)
    xmap <leader>w <Plug>(quickhl-manual-this-whole-word)
" }}}


" closetag {{{
    let g:closetag_html_style=1
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
    map <leader><space> :StripWhitespace<cr>
    let g:strip_whitespace_on_save = 1
    let g:strip_whitelines_at_eof=1
" }}}

" targets.vim {{{
    let g:targets_nl = 'nN'
    " Only seek if next/last targets touch current line
    " let g:targets_seekRanges = 'cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al'
    " Only consider targets around cursor
    let g:targets_seekRanges = 'cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB'
" }}}

" ################### 快速移动 ###################

" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F']
    augroup qs_colors
      autocmd!
      autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
      autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
    augroup END
" }}}

" matchup {{{
  " async
  let g:matchup_transmute_enabled = 1

  let g:matchup_matchparen_enabled = 0
  " let g:matchup_motion_enabled = 0
  let g:matchup_text_obj_enabled = 0
" }}}

" ################### 快速选中 ###################

" multiplecursors {{{
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_start_key='<CR>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" fzf {{{
    " extra key bindings
    let g:fzf_action = {
          \ 'ctrl-t': 'tab split',
          \ 'ctrl-x': 'split',
          \ 'ctrl-v': 'vsplit' }
    " layout - down / up / left / right
    let g:fzf_layout = { 'down': '~30%' }

    " Customize fzf colors to match color scheme
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

    " Enable per-command history.
    let g:fzf_history_dir = '~/.local/share/fzf-history'

    " [Buffers] Jump to the existing window if possible
    let g:fzf_buffers_jump = 1

    " keymap
    nnoremap <c-f> :FZF<CR>
" }}}

" ctrlp ctrlpfunky{{{
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    "map <leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/](node_modules|target|dist|build|__mocks__|__pycache__)|(\.(git|hg|svn|rvm))$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar\.gz|pyc|bundle\.js|jar|aac|png|ttf|otf|jpg|jpeg|jsbundle|bundle)$',
        \ }
    let g:ctrlp_working_path_mode = 0
    let g:ctrlp_match_window_bottom = 1
    let g:ctrlp_max_height = 15
    let g:ctrlp_match_window_reversed = 0
    let g:ctrlp_mruf_max = 10
    let g:ctrlp_follow_symlinks = 1
    let g:user_command_async = 1
    let g:match_current_file = 1
    " 如果安装了ag, 使用ag
    if executable('ag')
        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        " ag is fast enough that CtrlP doesn't need to cache
        " let g:ctrlp_use_caching = 0
    endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    " nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    " nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    " let g:ctrlp_funky_syntax_highlight = 1

    " let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'bottom'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    let g:ctrlsf_default_vim_mode = 'compact'
    let g:ctrlsf_ignore_dir = ['node_modules', '__mocks__', 'target', 'dist', 'build', '__pycache__', '.git', 'assets']
    let g:ctrlsf_extra_backend_args = {
          \ 'ag': '--ignore "*.jsbundle" --ignore "*.bundle.js" --ignore "*.bundle" --ignore "*.pyc"'
          \ }
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "<C-t>",
        \ "tabb"  : "<C-T>",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }

" }}}


" vim-grepper {{{
    nnoremap <leader>g :Grepper<CR>
" }}}

" fugitive {{{
    nnoremap <leader>gb :Gblame<CR>
" }}}

" gitgutter {{{
    " let g:gitgutter_map_keys = 0
    " let g:gitgutter_enabled = 1
    " let g:gitgutter_highlight_lines = 0
    " let g:gitgutter_realtime = 1
    " let g:gitgutter_async = 1
    " autocmd BufWritePost * GitGutter
    " let g:gitgutter_terminal_reports_focus=0
    " nnoremap <leader>gs :GitGutterToggle<CR>
" }}}

" signify {{{
    let g:signify_sign_add               = '+'
    let g:signify_sign_delete            = '-'
    let g:signify_sign_delete_first_line = '‾'
    let g:signify_sign_change            = '~'
    let g:signify_sign_changedelete      = g:signify_sign_change

    augroup signify_colors
      autocmd!
      autocmd ColorScheme * hi SignifySignAdd cterm=bold ctermbg=none  ctermfg=119
      autocmd ColorScheme * hi SignifySignDelete cterm=bold ctermbg=none  ctermfg=167
      autocmd ColorScheme * hi SignifySignChange cterm=bold ctermbg=none  ctermfg=227
    augroup END
" }}}

" committia {{{
  " 如果使用了fugitive插件, 推荐打开此设置
  " let g:committia_open_only_vim_starting = 1
" }}}

" ################### 显示增强 ###################

" airline {{{
    " need install powerline font for terminal
    " https://github.com/littlekey/fonts
    " recommend font: Source Code Pro
    " (https://github.com/littlekey/fonts/tree/master/SourceCodePro)
    let g:airline_powerline_fonts = 1
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
    " 集成tagbar
    let g:airline#extensions#tagbar#enabled = 1
    " 集成ctrlspace
    let g:airline#extensions#ctrlspace#enabled = 1
    " tabline展示buffers
    let g:airline#extensions#tabline#show_splits = 1
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#show_tabs = 0
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " 设置airline主题为tender
    let g:airline_theme = 'tender'
    " 集成ale
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#ale#error_symbol = g:ale_sign_error . ' '
    let g:airline#extensions#ale#warning_symbol = g:ale_sign_warning . ' '

    " not include ctrlp
    let g:airline_extensions = [
        \ 'tabline',
        \ 'quickfix',
        \ 'branch',
        \ 'ale',
        \ 'ycm',
        \ ]
    let g:airline_highlighting_cache = 1
    let g:airline_focuslost_inactive = 1
" }}}

" rainbow_parentheses {{{
    " 不加入这行, 防止黑色与深蓝括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    " \ ['Darkblue',    'SeaGreen3'],
    " let g:rbpt_colorpairs = [
    "    \ ['brown',       'RoyalBlue3'],
    "    \ ['darkgreen',   'firebrick3'],
    "    \ ['darkcyan',    'RoyalBlue3'],
    "    \ ['darkred',     'SeaGreen3'],
    "    \ ['lightyellow', 'SeaGreen3'],
    "    \ ['lightred',    'RoyalBlue3'],
    "    \ ['darkmagenta', 'DarkOrchid3'],
    "    \ ['red',         'firebrick3'],
    "    \ ]

    " let g:rbpt_max = 16
    " let g:rbpt_loadcmd_toggle = 0
    " augroup rainbow_parentheses_group
    "   au!
    "   au VimEnter * RainbowParenthesesToggle
    "   au Syntax * RainbowParenthesesLoadRound
    "  au Syntax * RainbowParenthesesLoadSquare
    "  au Syntax * RainbowParenthesesLoadBraces
    "augroup END
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
    map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', 'build/', '__pycache__' ]
    "close vim if the only window left open is a NERDTree
    " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'


    " nerdtreetabs
    " map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " 打开tab同步
    let g:nerdtree_tabs_synchronize_view=1
    let g:nerdtree_tabs_synchronize_focus=1
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}


" Vim Workspace Controller
" ctrlspace {{{
    let g:airline_exclude_preview = 1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

    if executable("ag")
      let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
    endif

    let g:CtrlSpaceIgnoredFiles = '\v(node_modules|\.git)[\/]'
    " let g:CtrlSpaceDefaultMappingKey = "<C-Space>"
" }}}


" 标签导航
" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
    let g:tagbar_show_linenumbers = -1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
" }}}

" Buffer操作
" bufkill {{{
    " close buffer
    nmap <Leader>BD :BD<CR>
    nmap <Leader>BB :BB<CR>
    nmap <Leader>BF :BF<CR>
    nmap <leader>BA :ba<cr>
" }}}

" ############################ 语法高亮 #########################

" ansible
augroup ansible_syntax_group
  autocmd!
  au BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible
augroup END

"------------------------------------------- end of configs --------------------------------------------
