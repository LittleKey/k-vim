" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   flake8

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off

" ################### 插件管理 ###################

" inspired by spf13, 自定义需要的插件集合
if !exists('g:bundle_groups')
    " let g:bundle_groups=['python', 'javascript', 'tmux', 'golang', 'ruby', 'less']
    let g:bundle_groups=['python', 'tmux', 'golang']
endif

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" vim-misc 提供一些vimscript的接口(e.g: join, is_mac, ...)
" Plug 'xolox/vim-misc'
" vital.vim 用于vimscript的一些函数
" Plug 'vim-jp/vital.vim'

" syntastic
" Plug 'scrooloose/syntastic'

" validator.vim
" fork from 'maralla/validator.vim', support ignore bufname
" 为了处理CtrlP在使用正则查询函数名时会触发匹配的BUG
" 添加了按bufname ignore的功能
Plug 'littlekey/validator.vim'

" Group dependencies, vim-snippets depends on ultisnips
" 代码片段快速插入 (snippets中,是代码片段资源,需要学习)
" Snippets are separated from the engine. Add this if you want them:
" Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" auto complete
" 代码自动补全
" completor for vim8
" Plug 'maralla/completor.vim', {'do': 'make js'}
" completor.vim 目前有问题不可使用, 暂用YCM代替
let YCM_COMPILE_COMMAND = './install.py --clang-completer --go-completer --java-completer --system-libclang'
Plug 'Valloric/YouCompleteMe', { 'frozen': 1, 'do': YCM_COMPILE_COMMAND, 'for': ['python', 'go', 'c', 'c++'] }

" 自动配对补全符号`e.g: (,[,{,',"`
" Plug 'jiangmiao/auto-pairs'
" 自动补全html/xml标签
Plug 'docunext/closetag.vim', { 'for': ['html', 'xml', 'javascript', 'jsx'] }

" 自动进入粘贴模式
Plug 'roxma/vim-paste-easy'

" 高亮选中单词
" Plug 't9md/vim-quickhl'

" 高亮模式匹配并提供preview
Plug 'markonm/traces.vim'

" quick edit
" 快速注释
Plug 'scrooloose/nerdcommenter'

" 增强<C-a>/<C-x>可以作用于日期
Plug 'tpope/vim-speeddating'

" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
" Plug 'bronson/vim-trailing-whitespace'
Plug 'ntpeters/vim-better-whitespace'

" 更高效的行内移动, f/F/t/T, 才触发
" quickscope
Plug 'unblevable/quick-scope'

" 增强配对能力, 并提供高亮
Plug 'andymass/vim-matchup'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'
" Plug 'Yilin-Yang/vim-markbar'

" quick selection and edit
" expandregion
" 选中区块
" Plug 'terryma/vim-expand-region'
" 多光标选中编辑
" multiplecursors
Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" change to https://github.com/ctrlpvim/ctrlp.vim
" ctrlp ctrlpfunky
Plug 'ctrlpvim/ctrlp.vim' | Plug 'tacahiroy/ctrlp-funky'
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" vim-grepper
Plug 'mhinz/vim-grepper'
" vim启动页面增强
Plug 'mhinz/vim-startify'

" eunuch
" Plug 'tpope/vim-eunuch'

" git
" fugitive
Plug 'tpope/vim-fugitive'
" gitgutter
Plug 'airblade/vim-gitgutter'
" committia 提升编辑git commit时的功能
Plug 'rhysd/committia.vim'

" 增强 ["\@\<C-r>] (vim寄存器)
" Plug 'junegunn/vim-peekaboo'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline', { 'do': 'git apply ../../others/airline_branch_cached_patch' }
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
" numbers 相对行号与绝对行号显示增强 too lag
" Plug 'myusuf3/numbers.vim'
" polyglot 多编程语言, 语法高亮, 主要用于不常用的语言, 省得装太多插件
Plug 'sheerun/vim-polyglot'

" Plug 'flazz/vim-colorschemes'
" molokai
" 主题 molokai
" Plug 'tomasr/molokai'
" tomorrow
" 主题 tomorrow
" Plug 'chriskempson/vim-tomorrow-theme'
" onedark
" 主题 onedark
" Plug 'joshdick/onedark.vim'
" monokai
" 主题 monokai
" Plug 'sickill/vim-monokai'
" vim-hybird
" 主题 vim-hybird
" Plug 'w0ng/vim-hybrid'
" jellybeans.vim
" 主题 jellybeans.vim
" Plug 'nanotech/jellybeans.vim'
" vim-kolor
" 主题 vim-kolor
" Plug 'zeis/vim-kolor'
" vim-lucius
" 主题 vim-lucius
" Plug 'jonathanfilip/vim-lucius'
" iceberg.vim
" 主题 iceberg.vim
" Plug 'cocopon/iceberg.vim'
" tender.vim
" 主题 tender.vim
Plug 'jacoborus/tender.vim'
" gruvbox
" 主题 gruvbox
" Plug 'morhetz/gruvbox'
" space-vim-dark
" 主题space-vim-dark
" Plug 'liuchengxu/space-vim-dark'

" nav
" nerdtree nerdtree-git-plugin
Plug 'scrooloose/nerdtree' | Plug 'Xuyuanp/nerdtree-git-plugin'
" ctrlspace
Plug 'vim-ctrlspace/vim-ctrlspace'
" tagbar
Plug 'majutsushi/tagbar'
" window swap
" Plug 'wesQ3/vim-windowswap'
" window resize
Plug 'simeji/winresizer'
" buffer operation improve
Plug 'qpkorr/vim-bufkill'

" targets.vim 添加更多的文本对象支持
Plug 'wellle/targets.vim'
" vim-sendwich 修改选中文本对象的环绕字符
Plug 'machakann/vim-sandwich'  " sa[添加环绕字符], sd[删除环绕字符], sr[替换环绕字符]

" wakatime
" Plug 'wakatime/vim-wakatime'
" let g:wakatime_ScreenRedraw = 0 " disable redraw screen after sending heartbeats


if count(g:bundle_groups, 'tmux')
    " tmux
    " For tmux navigator Ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'
    " Plug 'tmux-plugins/vim-tmux-focus-events'
endif

if count(g:bundle_groups, 'golang')
    " 1. vim a.go
    " 2. :GoInstallBinaries
    " vimgo  https://github.com/fatih/vim-go
    Plug 'fatih/vim-go', { 'tag': 'v1.17', 'frozen': 1, 'do': 'GoUpdateBinaries' }
endif


if count(g:bundle_groups, 'python')
    " for python.vim syntax highlight
    " pythonsyntax
    Plug 'hdima/python-syntax', {'for': 'python'}
    let python_highlight_all = 1
    let python_slow_sync = 0
    Plug 'hynek/vim-python-pep8-indent', {'for': 'python'}
    Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'python'}
endif

if count(g:bundle_groups, 'javascript')
    " javascript
    " 注意: syntax这个插件要放前面
    " Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
    " Plug 'othree/es.next.syntax.vim'
    Plug 'jelera/vim-javascript-syntax', {'for': ['javascript', 'jsx']} | Plug 'pangloss/vim-javascript', {'for': ['javascript', 'jsx']}
    " Plug 'maxmellon/vim-jsx-pretty', {'for': ['javascript', 'jsx']}
    Plug 'chemzqm/vim-jsx-improve', {'for': ['javascript', 'jsx']} " FIXME 会导致js缩进出问题
    " let g:vim_jsx_pretty_colorful_config = 1
    " Plug 'mxw/vim-jsx' " FIXME 如果打开，validator.vim不能正常检查javascript

    " TODO: jquery? for, remove or keep
    Plug 'othree/javascript-libraries-syntax.vim', {'for': ['javascript', 'jsx']}

    let g:used_javascript_libs = 'React,Flux'

    " for tagbar
    " Plug 'ternjs/tern_for_vim', {'do': 'npm install && npm install -g git+https://github.com/ramitos/jsctags.git', 'for': ['javascrip', 'jsx']}
endif

if count(g:bundle_groups, 'less')
    " ###### vim.less : less 自动更新##########
    " Plug 'groenewege/vim-less'
    " autocmd BufWritePost *.less :!lessc % > %:p:r.css
endif

if count(g:bundle_groups, 'kotlin')
  " ##### kotlin syntax #####
  Plug 'udalov/kotlin-vim', {'for': 'kotlin'}
endif

" this is just for beta version
if count(g:bundle_groups, 'beta')
    " Plug 'robbles/logstash.vim'

    " Plug 'ConradIrwin/vim-bracketed-paste'
endif

" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################

" falke8 ignore args
let flake8_ignore_args = '--ignore=E225,W503,H405,H306,H301,H201,H404,F812,E203 --max-line-length=88'

" validator.vim {{{
    " checker
    " let g:validator_error_symbol = '>>'
    " let g:validator_warning_symbol = '>'
    " let g:validator_style_error_symbol = '>>'
    " let g:validator_style_warning_symbol = '>'
    " let g:validator_auto_open_quickfix = 1
    function! AirlineInit()
      let g:validator_error_msg_format = "[● %d/%d errors]"
      call airline#parts#define_function('validator', 'validator#get_status_string')
      let g:airline_section_error = airline#section#create(['validator']) "disable syntastic
    endfunction
    autocmd User AirlineAfterInit call AirlineInit()

    let g:validator_python_checkers = ['flake8']
    let g:validator_python_flake8_args = flake8_ignore_args

    let g:validator_javascript_checkers = ['eslint']

    let g:validator_sh_checkers = ['shellcheck']

    " let g:validator_c_checker = ['clang-tidy']

    " let g:validator_go_checkers = ['gometalinter']
    " let g:validator_go_gometalinter_args = '--disable-all --line-length=88 --aggregate --vendor --enable=gochecknoinits --enable=gofmt --enable=vet --enable=vetshadow --enable=gotype'
    " let g:validator_go_checkers = ['gofmt']
    " let g:validator_go_golangci-lint = ''

    " let g:validator_filetype_map = {"py.j2": "python"}
    " 使用littlekey修改版validator.vim
    " g:validator_ignore 会检查文件类型与文件是否包含关键字
    let g:validator_ignore = ['java', 'ControlP']

    let g:validator_permament_sign = 1
" }}}

" ################### 自动补全 ###################

" completor.vim {{{
    " 直接触发自动补全 insert模式下
    let g:completor_auto_trigger = 1
" }}}

" YouCompleteMe {{{
    let g:ycm_python_binary_path = 'python'
    let g:ycm_key_list_select_completion = ['<C-P>', '<C-N>']
    let g:ycm_key_list_stop_completion = ['<CR>']
    let g:ycm_key_invoke_completion = '<C-C>'
    " vertical-split | new-or-existing-tab
    let g:ycm_goto_buffer_command = 'new-or-existing-tab'
    let g:ycm_complete_in_comments = 1
    let g:ycm_auto_trigger = 0

    let g:ycm_global_ycm_extra_conf = '$HOME/dotfiles/k-vim/others/.ycm_extra_conf.py'
" }}}

" vim-quickhl {{{
    nmap <leader>w <Plug>(quickhl-manual-this-whole-word)
    xmap <leader>w <Plug>(quickhl-manual-this-whole-word)
" }}}


" closetag {{{
    let g:closetag_html_style=1
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
" }}}

" trailingwhitespace {{{
    map <leader><space> :StripWhitespace<cr>
    let g:strip_whitespace_on_save = 1
    let g:strip_whitelines_at_eof=1
" }}}

" targets.vim {{{
    let g:targets_nl = 'nN'
    " Only seek if next/last targets touch current line
    " let g:targets_seekRanges = 'cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al'
    " Only consider targets around cursor
    let g:targets_seekRanges = 'cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB'
" }}}

" ################### 快速移动 ###################

" quickscope {{{
    let g:qs_highlight_on_keys = ['f', 'F']
    augroup qs_colors
      autocmd!
      autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
      autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
    augroup END
" }}}

" matchup {{{
  " async
  let g:matchup_transmute_enabled = 1

  let g:matchup_matchparen_enabled = 0
  " let g:matchup_motion_enabled = 0
  let g:matchup_text_obj_enabled = 0
" }}}

" ################### 快速选中 ###################

" expandregion {{{
    " map + <Plug>(expand_region_expand)
    " map _ <Plug>(expand_region_shrink)
    vmap v <Plug>(expand_region_expand)
    vmap V <Plug>(expand_region_shrink)
    " Extend the global default
    if exists("*expand_region#custom_text_objects")
        call expand_region#custom_text_objects({
        \ 'a]' :1,
        \ 'ab' :1,
        \ 'aB' :1,
        \ 'ii' :0,
        \ 'ai' :0,
        \ })
    endif

" }}}

" multiplecursors {{{
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_start_key='<CR>'
    let g:multi_cursor_quit_key='<Esc>'
" }}}

" ################### 功能相关 ###################

" ctrlp ctrlpfunky{{{
    let g:ctrlp_map = '<leader>p'
    let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/](node_modules|target|dist|build|__mocks__|__pycache__)|(\.(git|hg|svn|rvm))$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar\.gz|pyc|bundle\.js|jar|aac|png|ttf|otf|jpg|jpeg|jsbundle|bundle)$',
        \ }
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    " 如果安装了ag, 使用ag
    if executable('ag')
        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        " ag is fast enough that CtrlP doesn't need to cache
        let g:ctrlp_use_caching = 0
    endif

    " ctrlpfunky
    " ctrlp插件1 - 不用ctag进行函数快速跳转
    nnoremap <Leader>fu :CtrlPFunky<Cr>
    " narrow the list down with a word under cursor
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
    let g:ctrlp_funky_syntax_highlight = 1

    let g:ctrlp_extensions = ['funky']
" }}}


" ctrlsf {{{
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'bottom'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    let g:ctrlsf_default_vim_mode = 'compact'
    let g:ctrlsf_ignore_dir = ['node_modules', '__mocks__', 'target', 'dist', 'build', '__pycache__', '.git', 'assets']
    let g:ctrlsf_extra_backend_args = {
          \ 'ag': '--ignore "*.jsbundle" --ignore "*.bundle.js" --ignore "*.bundle" --ignore "*.pyc"'
          \ }
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "<C-t>",
        \ "tabb"  : "<C-T>",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }
" }}}


" vim-grepper {{{
    nnoremap <leader>g :Grepper<CR>
" }}}

" fugitive {{{
    nnoremap <leader>gb :Gblame<CR>
" }}}

" gitgutter {{{
    let g:gitgutter_map_keys = 0
    let g:gitgutter_enabled = 1
    let g:gitgutter_highlight_lines = 0
    let g:gitgutter_realtime = 1
    let g:gitgutter_async = 1
    " autocmd BufWritePost * GitGutter
    " let g:gitgutter_terminal_reports_focus=0
    " nnoremap <leader>gs :GitGutterToggle<CR>
" }}}

" committia {{{
  " 如果使用了fugitive插件, 推荐打开此设置
  let g:committia_open_only_vim_starting = 1
" }}}

" ################### 显示增强 ###################

" airline {{{
    " need install powerline font for terminal
    " https://github.com/littlekey/fonts
    " recommend font: Source Code Pro
    " (https://github.com/littlekey/fonts/tree/master/SourceCodePro)
    let g:airline_powerline_fonts = 1
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
    " 集成tagbar
    let g:airline#extensions#tagbar#enabled = 1
    " 集成ctrlspace
    let g:airline#extensions#ctrlspace#enabled = 1
    " tabline展示buffers
    let g:airline#extensions#tabline#show_splits = 1
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#show_tabs = 0
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " 设置airline主题为tender
    let g:airline_theme = 'tender'

    " not include ctrlp
    let g:airline_extensions = [
        \ 'tabline',
        \ 'ctrlspace',
        \ 'quickfix',
        \ 'branch',
        \ 'grepper',
        \ 'ycm',
        \ 'ctrlp',
        \ 'ale',
        \ ]
    let g:airline_highlighting_cache = 1
    let g:airline_focuslost_inactive = 1
" }}}

" rainbow_parentheses {{{
    " 不加入这行, 防止黑色与深蓝括号出现, 很难识别
    " \ ['black',       'SeaGreen3'],
    " \ ['Darkblue',    'SeaGreen3'],
    let g:rbpt_colorpairs = [
        \ ['brown',       'RoyalBlue3'],
        \ ['darkgreen',   'firebrick3'],
        \ ['darkcyan',    'RoyalBlue3'],
        \ ['darkred',     'SeaGreen3'],
        \ ['lightyellow', 'SeaGreen3'],
        \ ['lightred',    'RoyalBlue3'],
        \ ['darkmagenta', 'DarkOrchid3'],
        \ ['red',         'firebrick3'],
        \ ]

    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
" }}}

" polyglot {{{
    " 已配置语法支持插件的语言, 不使用polyglot
    let g:polyglot_disabled = ['python']
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
    map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', 'build/', '__pycache__' ]
    "close vim if the only window left open is a NERDTree
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'


    " nerdtreetabs
    " map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " 打开tab同步
    let g:nerdtree_tabs_synchronize_view=1
    let g:nerdtree_tabs_synchronize_focus=1
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
" }}}


" Vim Workspace Controller
" ctrlspace {{{
    let g:airline_exclude_preview = 1
    hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
    hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
    hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
    hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

    if executable("ag")
      let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
    endif

    let g:CtrlSpaceIgnoredFiles = '\v(node_modules|\.git)[\/]'
    " let g:CtrlSpaceDefaultMappingKey = "<C-Space>"
" }}}


" 标签导航
" tagbar {{{
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
    let g:tagbar_show_linenumbers = -1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
" }}}

" Buffer操作
" bufkill {{{
    " close buffer
    nmap <Leader>BD :BD<CR>
    nmap <Leader>BB :BB<CR>
    nmap <Leader>BF :BF<CR>
    nmap <leader>BA :ba<cr>
" }}}


" ################### 语言相关 ###################

" pythonsyntax {{{
    let python_highlight_all = 1
" }}}

" vimgo {{{
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_build_constraints = 1

    let g:go_fmt_fail_silently = 1
    let g:go_fmt_command = "gofmt"
" }}}

" javascript {{{
    " pangloss/vim-javascript
    let g:html_indent_inctags = "html,body,head,tbody"
    let g:html_indent_script1 = "inc"
    let g:html_indent_style1 = "inc"

    let g:javascript_plugin_flow = 1
    let g:jsx_ext_required = 0
" }}}

"------------------------------------------- end of configs --------------------------------------------
