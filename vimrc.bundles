" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   flake8

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible

" ################### 插件管理 ###################

" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

" ######################### basic function ########################

func! s:AddAirlineExtension(name) abort
  if has_key(g:plugs, 'vim-airline')
    let g:airline_extensions += [a:name]
  endif
endfunc

" 移动光标到插件名上, 使用'#'快速跳转到每个插件的配置处

" vim-misc 提供一些vimscript的接口(e.g: join, is_mac, ...)
" Plug 'xolox/vim-misc'
" vital.vim 用于vimscript的一些函数
" Plug 'vim-jp/vital.vim'

" 异步lint组件
Plug 'w0rp/ale', { 'for': ['python', 'go', 'proto', 'ansible', 'c', 'cpp', 'json', 'rust' ] }
Plug 'ambv/black', { 'for': ['python'], 'do': 'git clean -f && git apply ../../others/black_virtualenv_patch' }

" auto complete
" 代码自动补全
let COC_COMPLETE_FILE_TYPES = [
      \ 'python',
      \ 'go',
      \ 'bash',
      \ 'json',
      \ 'vim',
      \ 'c',
      \ 'cpp',
      \ 'javascript',
      \ 'rust',
      \ ]
" Plug 'neoclide/coc.nvim', { 'branch': 'release', 'for': COC_COMPLETE_FILE_TYPES }

" 单词拼写检查
" spelunker
Plug 'kamykn/spelunker.vim', { 'for': ['go', 'python', 'proto', 'ansible', 'c', 'cpp', 'json', 'rust', 'toml', 'yaml'] }

" 自动配对补全符号`e.g: (,[,{,',"`
" Plug 'jiangmiao/auto-pairs'
" 自动补全html/xml标签
" Plug 'docunext/closetag.vim', { 'for': ['html', 'xml', 'javascript', 'jsx'] }

" 自动进入粘贴模式
" Plug 'roxma/vim-paste-easy'

" 高亮选中单词
" Plug 't9md/vim-quickhl'

" 高亮模式匹配并提供preview
Plug 'markonm/traces.vim'

" quick edit
" 快速注释
" Plug 'scrooloose/nerdcommenter' WARNING!! make vim very slow in input mode
" if open too many buffers.(about 50)
" Plug 'tpope/vim-commentary'

" 增强<C-a>/<C-x>可以作用于日期
" Plug 'tpope/vim-speeddating'

" trailingwhitespace
" 快速去行尾空格 [, + <Space>]
" Plug 'bronson/vim-trailing-whitespace'
" Plug 'ntpeters/vim-better-whitespace'

" 增强配对能力, 并提供高亮
Plug 'andymass/vim-matchup'
" signature
" 显示marks - 方便自己进行标记和跳转
" m[a-zA-Z] add mark
" '[a-zA-Z] go to mark
" m<Space>  del all marks
" m/        list all marks
" m.        add new mark just follow previous mark
Plug 'kshenoy/vim-signature'
" Plug 'Yilin-Yang/vim-markbar'

" 多光标选中编辑
" multiplecursors
" Plug 'terryma/vim-multiple-cursors'

" quick locate file or function
" 文件搜索
" fzf better than ctrlp (more faster and without cache)
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
" ctrlsf
" 类似sublimetext的搜索
" In CtrlSF window:
" 回车/o, 打开
" t       在tab中打开(建议)
" T - Lkie t but focus CtrlSF window instead of opened new tab.
" q - Quit CtrlSF window.
Plug 'dyng/ctrlsf.vim'
" vim-grepper
" Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }

" vim启动页面增强
Plug 'mhinz/vim-startify'

" eunuch
" Plug 'tpope/vim-eunuch'

" git
" fugitive
" Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" 增强 ["\@\<C-r>] (vim寄存器)
" Plug 'junegunn/vim-peekaboo'

" view
" airline
" 状态栏增强展示
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" rainbow_parentheses
" 括号显示增强
" Plug 'kien/rainbow_parentheses.vim'

" 语法高亮
" c/cpp
" Plug 'octol/vim-cpp-enhanced-highlight', { 'for': ['cpp', 'c'] }
" cmake
" git
Plug 'tpope/vim-git', { 'for': ['git'] }
" fish
" Plug 'dag/vim-fish', { 'for': ['sh', 'fish'] }
" haskell
" Plug 'neovimhaskell/haskell-vim', { 'for': ['haskell'] }
" html
" Plug 'othree/html5.vim', { 'for': ['html'] }
" json
" Plug 'elzr/vim-json', { 'for': ['json'] }
" less
" Plug 'groenewege/vim-less', { 'for': ['less'] }
" lua
" Plug 'tbastos/vim-lua', { 'for': ['lua'] }
" nginx
" Plug 'chr4/nginx.vim', { 'for': ['nginx'] }
" protobuf
Plug 'uarun/vim-protobuf', { 'for': ['proto'] }
" thrift
" Plug 'solarnz/thrift.vim', { 'for': ['thrift'] }
" tmux
" Plug 'ericpruitt/tmux.vim', { 'for': ['tmux'], 'rtp': 'vim/' }
" typescript
" Plug 'leafgarland/typescript-vim', { 'for': ['typescript'] }
" yaml
" Plug 'stephpy/vim-yaml', { 'for': ['yaml'] }
" toml
Plug 'cespare/vim-toml', { 'for': ['toml'] }
" kotlin
" Plug 'udalov/kotlin-vim', { 'for': ['kotlin'] }
" rust
" Plug 'rust-lang/rust.vim', { 'for': ['rust'] }
" let g:rustfmt_autosave = 1

Plug 'yogorobot/bitproto', { 'rtp': 'editors/vim/' , 'for': ['bitproto'] }

Plug 'flazz/vim-colorschemes'
" molokai
" 主题 molokai
" Plug 'tomasr/molokai'
" tomorrow
" 主题 tomorrow
Plug 'chriskempson/base16-vim'
" onedark
" 主题 onedark
" Plug 'joshdick/onedark.vim'
" monokai
" 主题 monokai
" Plug 'sickill/vim-monokai'
" vim-hybird
" 主题 vim-hybird
" Plug 'w0ng/vim-hybrid'
" jellybeans.vim
" 主题 jellybeans.vim
" Plug 'nanotech/jellybeans.vim'
" vim-kolor
" 主题 vim-kolor
" Plug 'zeis/vim-kolor'
" vim-lucius
" 主题 vim-lucius
Plug 'jonathanfilip/vim-lucius'
" iceberg.vim
" 主题 iceberg.vim
" Plug 'cocopon/iceberg.vim'
" tender.vim
" 主题 tender.vim
Plug 'jacoborus/tender.vim'
" gruvbox
" 主题 gruvbox
" Plug 'morhetz/gruvbox'
" space-vim-dark
" 主题space-vim-dark
Plug 'liuchengxu/space-vim-dark'

" nav
" nerdtree nerdtree-git-plugin
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } | Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' }
" tagbar
" Plug 'majutsushi/tagbar'
" window resize
" Plug 'simeji/winresizer'
" buffer operation improve
" Plug 'qpkorr/vim-bufkill'

" targets.vim 添加更多的文本对象支持
Plug 'wellle/targets.vim'
" vim-sendwich 修改选中文本对象的环绕字符
Plug 'machakann/vim-sandwich'  " sa[添加环绕字符], sd[删除环绕字符], sr[替换环绕字符]
" vim-abolish转换CamelCase与Snake
" Plug 'tpope/vim-abolish'
" Plug 'chaoren/vim-wordmotion'

" wakatime
" Plug 'wakatime/vim-wakatime'
" let g:wakatime_ScreenRedraw = 0 " disable redraw screen after sending heartbeats

" tmux
" For tmux navigator Ctrl-hjkl
Plug 'christoomey/vim-tmux-navigator'
" Plug 'tmux-plugins/vim-tmux-focus-events'

" 1. vim a.go
" 2. :GoInstallBinaries
" vimgo  https://github.com/fatih/vim-go
Plug 'fatih/vim-go', { 'tag': 'v1.22', 'frozen': 1, 'do': 'GoUpdateBinaries' }


" for python.vim syntax highlight
" pythonsyntax
Plug 'hdima/python-syntax', {'for': 'python'}
let g:python_highlight_all = 1
let g:python_highlight_file_headers_as_comments = 1
let g:python_slow_sync = 1
" has bug if "{{" was present and not close with "}}"
" Plug 'Vimjas/vim-python-pep8-indent', {'for': 'python'}
Plug 'hattya/python-indent.vim', {'for': 'python'}  " working fine.
Plug 'Glench/Vim-Jinja2-Syntax', {'for': 'python'}

" javascript
" 注意: syntax这个插件要放前面
" Plug 'othree/yajs.vim' | Plug 'pangloss/vim-javascript'
" Plug 'othree/es.next.syntax.vim'
" Plug 'jelera/vim-javascript-syntax', {'for': ['javascript', 'jsx']} | Plug 'pangloss/vim-javascript', {'for': ['javascript', 'jsx']}
" pangloss/vim-javascript
" Plug 'maxmellon/vim-jsx-pretty', {'for': ['javascript', 'jsx']}
" Plug 'chemzqm/vim-jsx-improve', {'for': ['javascript', 'jsx']} " FIXME 会导致js缩进出问题
" let g:vim_jsx_pretty_colorful_config = 1
" Plug 'mxw/vim-jsx' " FIXME 如果打开，validator.vim不能正常检查javascript

" TODO: jquery? for, remove or keep
" Plug 'othree/javascript-libraries-syntax.vim', {'for': ['javascript', 'jsx']}

" for tagbar
" Plug 'ternjs/tern_for_vim', {'do': 'npm install && npm install -g git+https://github.com/ramitos/jsctags.git', 'for': ['javascrip', 'jsx']}

" Add plugins to &runtimepath
call plug#end()


" ################### 基础 ######################

" ale {{{
    if has_key(g:plugs, 'ale')
      " Only run linters named in ale_linters settings.
      let g:ale_linters_explicit = 1

      " pip install ansible-lint
      " brew install cppcheck
      " npm install jsonlint -g
      let g:ale_linters = {
            \  'go': ['gofmt', 'govet', 'gochecknoinits', 'goimport', 'gotype', 'misspell', 'gopls'],
            \  'proto': ['prototool'],
            \  'python': ['black', 'mypy', 'vulture'],
            \  'ansible': ['ansible-lint'],
            \  'c': ['cppcheck', 'clang'],
            \  'cpp': ['cppcheck', 'clang'],
            \  'json': ['jsonlint'],
            \  'sh': ['shellcheck'],
            \  'rust': ['rls'],
            \}
      let g:ale_python_vulture_options = '--min-confidence 80 --ignore-names "_ign*" --exclude "*py2.py,*py2_grpc.py"'
      let g:ale_python_mypy_options =
            \ '--ignore-missing-imports --follow-imports skip --disallow-untyped-defs'.' '.
            \ '--disallow-untyped-decorators --strict-optional --warn-unused-ignores'.' '.
            \ '--no-implicit-optional --warn-redundant-casts'
      " Only run fixers anemd in ale_fixers settings.
      " npm install -g prettier
      " let g:ale_fixers_explicit = 1
      " let g:ale_fixers = {
            " \}
      " let g:ale_fix_on_save = 1

      let g:ale_sign_column_always = 1

      let g:ale_sign_error = "\uf05e"
      let g:ale_sign_warning = "\uf071"

      let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
      let g:ale_echo_msg_error_str = 'E'
      let g:ale_echo_msg_warning_str = 'W'
      let g:ale_echo_msg_format = '[%linter%]% code:% %s [%severity%] '

      let g:ale_rust_rls_toolchain = 'stable'

      " let g:ale_lint_on_text_changed = 'normal'  " [never|normal]
      " let g:ale_lint_delay = 200 " ms
      " let g:ale_lint_on_enter = 1
      " let g:ale_lint_on_insert_leave = 0
      " let g:ale_lint_on_save = 1

      let g:ale_set_highlights = 1
      highlight link ALEErrorSign  error
      highlight link ALEWarningSign Exception


      augroup ale_hightlight_group
        autocmd!
        autocmd User ale call s:AddAirlineExtension('ale')
        autocmd ColorScheme * highlight ALEErrorSign cterm=bold ctermbg=none  ctermfg=red
        autocmd ColorScheme * highlight ALEWarningSign cterm=bold ctermbg=none  ctermfg=darkmagenta
      augroup END
    endif
" }}}

" spelunker {{{
    if has_key(g:plugs, 'spelunker.vim')
      set nospell
      " switch on
      let g:enable_spelunker_vim = 1
      " speed up
      let g:enable_spelunker_vim_on_readonly = 0
      " improvement of accuracy
      let g:spelunker_target_min_char_len = 3
      let g:spelunker_max_suggest_words = 15
      " optimize performance
      let g:spelunker_max_hi_word_each_buf = 100
      " check only in file save and buf win enter. speed up!
      let g:spelunker_check_type = 1
      " improvement of accuracy
      let g:spelunker_highlight_type = 2
      let g:spelunker_disable_auto_group = 0

      " user dictionary
      let s:wl = []

      " user name
      let s:wl += ['littlekey', 'pelletier', 'uber']

      " abbreviation
      let s:wl += ['hasn', 'cfg', 'conns', 'addr', 'baudrate', 'gw', 'ctx', 'shouldn', 'calu', 'idx']
      let s:wl += ['src', 'dest', 'reco', 'req', 'ele', 'sigs', 'sig', 'ack', 'cli', 'zacc', 'laddr', 'raddr', 'uvc']
      let s:wl += ['args', 'kwargs']

      " conjuncation
      let s:wl += ['inplace', 'nostop', 'hardcode']

      " unfamiliar
      let s:wl += ['disinfector', 'saltus']

      " const literals
      let s:wl += ['FF', 'FFF', 'FFFF', 'FFFFF', 'FFFFFF']

      " programming noun
      let s:wl += ['yaml', 'grpc', 'websocket', 'hostname', 'proto', 'sdk', 'accessor', 'protobuf']
      let s:wl += ['ieee', 'crc', 'sof', 'mux', 'rpc', 'imu', 'false', 'deserialize']

      " program name
      let s:wl += ['mplayer', 'espeak']

      " arguments
      let s:wl += ['softvol']

      " protobuf keyword
      let s:wl += ['oneof']

      " golang keyword
      let s:wl += ['goroutine']

      " golang logger name
      let s:wl += ['debugf', 'infof', 'fatalf', 'warnf', 'errorf']

      " golang library
      let s:wl += ['ioutil', 'fmt', 'bufio', 'bzip', 'flate', 'zlib', 'ecdsa', 'hmac', 'pkix', 'gosym']
      let s:wl += ['expvar', 'suffixarray', 'cmplx', 'fcgi', 'httptest', 'httptrace', 'httputil', 'pprof']
      let s:wl += ['jsonrpc', 'smtp', 'textproto', 'filepath', 'syscall', 'iotest', 'tabwriter', 'uuid']
      let s:wl += ['strconv', 'taskq', 'opentracing']

      " python library
      let s:wl += ['sys']

      " golang package name
      let s:wl += ['gwapi', 'statemachine', 'behaviortree', 'taskmanager', 'hsm', 'abc']
      let s:wl += ['protocolv', 'gogo', 'meteorsite', 'grpcrecovery', 'robotcctypes', 'mosstypes']
      let s:wl += ['errorcode', 'yogosystem']

      " golang function name
      let s:wl += ['unmarshal', 'itoa', 'atoi']
      let s:wl += ['goos', 'goarch', 'goarm']

      " golang const name
      let s:wl += ['rdonly', 'wronly', 'trunc', 'sigint', 'sigterm', 'omitempty']

      " yogo dictionary
      let s:wl += ['yogo', 'yogorobot', 'yogoswarm', 'kago']

      " variable names
      let s:wl += ['pois', 'gid', 'sid', 'uid', 'dtype', 'robotcc', 'buildby', 'buildtime', 'sos']
      let s:wl += ['apis', 'lastlog', 'suppresslog', 'curlog', 'ipx', 'ipy', 'rpx', 'rpy', 'lth', 'wth', 'ith']
      let s:wl += ['gopoint', 'errorcodes', 'pid']

      let g:spelunker_white_list_for_user = s:wl

      augroup spelunker
        autocmd!

        autocmd BufWinEnter,BufWritePost *.go,*.py,*.toml,*.json,*.yml call spelunker#check()
        " autocmd CursorHold *.go,*.py,*.txt call spelunker#check_displayed_words()
      augroup END

      let g:spelunker_spell_bad_group = 'SpelunkerSpellBad'
      let g:spelunker_complex_or_compound_word_group = 'SpelunkerComplexOrCompoundWord'

      augroup spelunker_hightlight_group
        autocmd!
        autocmd ColorScheme * highlight SpelunkerSpellBad cterm=underline,bold ctermfg=darkred
        autocmd ColorScheme * highlight SpelunkerComplexOrCompoundWord cterm=underline ctermfg=darkmagenta
      augroup END
    endif
" }}}

" vimgo {{{
    if has_key(g:plugs, 'vim-go')
      " highlight options
      let g:go_highlight_array_whitespace_error = 1
      let g:go_highlight_chan_whitespace_error = 1
      let g:go_highlight_extra_types = 1
      let g:go_highlight_space_tab_error = 1
      let g:go_highlight_trailing_whitespace_error = 1
      let g:go_highlight_operators = 1
      let g:go_highlight_methods = 1
      let g:go_highlight_functions = 1
      let g:go_highlight_function_parameters = 0
      let g:go_highlight_function_calls = 0
      let g:go_highlight_structs = 1
      let g:go_highlight_types = 1
      let g:go_highlight_fields = 0
      let g:go_highlight_build_constraints = 1
      let g:go_highlight_generate_tags = 1
      let g:go_highlight_string_spellcheck = 0
      let g:go_highlight_format_strings = 1
      let g:go_highlight_variable_declarations = 1
      let g:go_highlight_variable_assignments = 1

      let g:go_fmt_fail_silently = 1
      let g:go_fmt_command = "gofmt"
      let g:go_def_mode = "gopls" " instead of (fucking slowly) guru
      let g:go_info_mode = "gopls"
      let g:go_doc_keywordprg_enabled = 0 " disable GoDoc
      let g:go_template_autocreate = 0 " disable GoTemplate
      let g:go_code_completion_enabled = 0 " disable code completed

      " lsp: language server protocol
      " let g:LanguageClient_serverCommands = { 'go': ['gopls'] }
      " autocmd BufWritePre *.go :call LanguageClient#textDocument_formatting_sync()
    endif
" }}}

" black {{{
    if has_key(g:plugs, 'black')
      let g:black_virtualenv = '' . $VIRTUAL_ENV
      augroup black_group
        autocmd!
        autocmd BufWritePre *.py silent! Black
      augroup END
    endif
" }}}

" javascript {{{
    if has_key(g:plugs, 'vim-javascript-syntax')
      let g:html_indent_inctags = "html,body,head,tbody"
      let g:html_indent_script1 = "inc"
      let g:html_indent_style1 = "inc"

      let g:javascript_plugin_flow = 1
      let g:jsx_ext_required = 0

      let g:used_javascript_libs = 'React,Flux'
    endif
" }}}

" ################### 自动补全 ###################

" coc {{{
  if has_key(g:plugs, 'coc.nvim')
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1] =~ '\s'
    endfunction

    augroup coc_option
      autocmd!
      " map gd to go to definition
      exec "au FileType " . join(COC_COMPLETE_FILE_TYPES, ",") . " nmap <silent> gd <Plug>(coc-definition)"
      " map <Tab> && <S-Tab> to manually trigger completion
      inoremap <silent><expr> <Tab>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<Tab>" :
            \ coc#refresh()
      inoremap <silent><expr> <S-Tab>
            \ pumvisible() ? "\<C-p>" :
            \ <SID>check_back_space() ? "\<S-Tab>" :
            \ coc#refresh()
    augroup END
  endif
" }}}

" vim-quickhl {{{
  if has_key(g:plugs, 'vim-quickhl')
    nmap <leader>w <Plug>(quickhl-manual-this-whole-word)
    xmap <leader>w <Plug>(quickhl-manual-this-whole-word)
  endif
" }}}


" closetag {{{
  if has_key(g:plugs, 'closetag.vim')
    let g:closetag_html_style=1
  endif
" }}}

" ################### 快速编码 ###################

" nerdcommenter {{{
  if has_key(g:plugs, 'nerdcommenter')
    let g:NERDSpaceDelims=1
    let g:NERDAltDelims_python = 1
  endif
" }}}

" trailingwhitespace {{{
  if has_key(g:plugs, 'vim-trailing-whitespace') || has_key(g:plugs, 'vim-better-whitespace')
    map <leader><space> :StripWhitespace<cr>
    let g:strip_whitespace_on_save = 1
    let g:strip_whitelines_at_eof=1
  endif
" }}}

" targets.vim {{{
  if has_key(g:plugs, 'targets.vim')
    let g:targets_nl = 'nN'
    " Only seek if next/last targets touch current line
    " let g:targets_seekRanges = 'cr cb cB lc ac Ac lr rr ll lb ar ab lB Ar aB Ab AB rb rB al Al'
    " Only consider targets around cursor
    let g:targets_seekRanges = 'cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB'
  endif
" }}}

" ################### 快速移动 ###################

" matchup {{{
  if has_key(g:plugs, 'vim-matchup')
    " async
    let g:matchup_transmute_enabled = 1

    let g:matchup_matchparen_enabled = 0
    " let g:matchup_motion_enabled = 0
    let g:matchup_text_obj_enabled = 0
  endif
" }}}

" ################### 快速选中 ###################

" multiplecursors {{{
  if has_key(g:plugs, 'vim-multiple-cursors')
    let g:multi_cursor_use_default_mapping=0
    " Default mapping
    let g:multi_cursor_start_key='<CR>'
    let g:multi_cursor_quit_key='<Esc>'
  endif
" }}}

" ################### 功能相关 ###################

" fzf {{{
  if has_key(g:plugs, 'fzf') && has_key(g:plugs, 'fzf.vim')
    " extra key bindings
    let g:fzf_action = {
          \ 'ctrl-t': 'tab split',
          \ 'ctrl-x': 'split',
          \ 'ctrl-v': 'vsplit' }
    " layout - down / up / left / right
    let g:fzf_layout = { 'down': '~30%' }

    " Customize fzf colors to match color scheme
    let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

    " Enable per-command history.
    let g:fzf_history_dir = '~/.local/share/fzf-history'

    " [Buffers] Jump to the existing window if possible
    let g:fzf_buffers_jump = 1

    " keymap
    nnoremap <c-f> :FZF<CR>
  endif
" }}}

" ctrlsf {{{
  if has_key(g:plugs, 'ctrlsf.vim')
    nmap \ <Plug>CtrlSFCwordPath<CR>
    " let g:ctrlsf_position = 'bottom'
    " let g:ctrlsf_winsize = '30%'
    let g:ctrlsf_auto_close = 0
    let g:ctrlsf_confirm_save = 0
    let g:ctrlsf_default_vim_mode = 'compact'
    let g:ctrlsf_ignore_dir = ['node_modules', '__mocks__', 'target', 'dist', 'build', '__pycache__', '.git', 'assets']
    let g:ctrlsf_extra_backend_args = {
          \ 'ag': '--ignore "*.jsbundle" --ignore "*.bundle.js" --ignore "*.bundle" --ignore "*.pyc"'
          \ }
    " Note: cannot use <CR> or <C-m> for open
    " Use : <sapce> or <tab>
    let g:ctrlsf_mapping = {
        \ "open"  : "<Space>",
        \ "openb" : "O",
        \ "tab"   : "<C-t>",
        \ "tabb"  : "<C-T>",
        \ "prevw" : "p",
        \ "quit"  : "q",
        \ "next"  : "<C-J>",
        \ "prev"  : "<C-K>",
        \ "pquit" : "q",
        \ }
  endif
" }}}


" vim-grepper {{{
  if has_key(g:plugs, 'vim-grepper')
    nnoremap <leader>g :Grepper<CR>
  endif
" }}}

" fugitive {{{
  if has_key(g:plugs, 'vim-fugitive')
    nnoremap <leader>gb :Gblame<CR>
  endif
" }}}

" signify {{{
  if has_key(g:plugs, 'vim-signify')
    let g:signify_sign_add               = '+'
    let g:signify_sign_delete            = '-'
    let g:signify_sign_delete_first_line = '‾'
    let g:signify_sign_change            = '~'
    let g:signify_sign_changedelete      = g:signify_sign_change

    augroup signify_colors
      autocmd!
      autocmd ColorScheme * hi SignifySignAdd cterm=bold ctermbg=none  ctermfg=119
      autocmd ColorScheme * hi SignifySignDelete cterm=bold ctermbg=none  ctermfg=167
      autocmd ColorScheme * hi SignifySignChange cterm=bold ctermbg=none  ctermfg=227
    augroup END
  endif
" }}}

" ################### 显示增强 ###################

" airline {{{
  if has_key(g:plugs, 'vim-airline')
    " need install powerline font for terminal
    " https://github.com/littlekey/fonts
    " recommend font: Source Code Pro
    " (https://github.com/littlekey/fonts/tree/master/SourceCodePro)
    let g:airline_powerline_fonts = 1
    " 是否打开tabline
    let g:airline#extensions#tabline#enabled = 1
    " 集成tagbar
    let g:airline#extensions#tagbar#enabled = 1
    " 集成ctrlspace
    let g:airline#extensions#ctrlspace#enabled = 0
    " tabline展示buffers
    let g:airline#extensions#tabline#show_splits = 1
    let g:airline#extensions#tabline#show_buffers = 1
    let g:airline#extensions#tabline#show_tabs = 0
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    " 设置airline主题为tender
    let g:airline_theme = 'tender'
    " 集成ale
    let g:airline#extensions#ale#enabled = 1
    let g:airline#extensions#ale#error_symbol = g:ale_sign_error . ' '
    let g:airline#extensions#ale#warning_symbol = g:ale_sign_warning . ' '
    " 集成coc
    let g:airline#extensions#coc#enabled = 0
    let airline#extensions#coc#error_symbol = 'E:'
    let airline#extensions#coc#warning_symbol = 'W:'
    let airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
    let airline#extensions#coc#stl_format_warn = '%W{[%w(#%fw)]}'

    " not include ctrlp
    let g:airline_extensions = [
        \ 'tabline',
        \ 'quickfix',
        \ 'branch',
        \ 'whitespace',
        \ ]

    let g:airline_highlighting_cache = 1
    let g:airline_focuslost_inactive = 1
  endif
" }}}

" rainbow_parentheses {{{
  if has_key(g:plugs, "rainbow_parentheses")
    " 不加入这行, 防止黑色与深蓝括号出现, 很难识别
    let g:rbpt_colorpairs = [
       \ ['brown',       'RoyalBlue3'],
       \ ['darkgreen',   'firebrick3'],
       \ ['darkcyan',    'RoyalBlue3'],
       \ ['darkred',     'SeaGreen3'],
       \ ['lightyellow', 'SeaGreen3'],
       \ ['lightred',    'RoyalBlue3'],
       \ ['darkmagenta', 'DarkOrchid3'],
       \ ['red',         'firebrick3'],
       \ ['black',       'SeaGreen3'],
       \ ['Darkblue',    'SeaGreen3'],
       \ ]
    let g:rbpt_max = 16
    let g:rbpt_loadcmd_toggle = 0
    augroup rainbow_parentheses_group
      au!
      au VimEnter * RainbowParenthesesToggle
      au Syntax * RainbowParenthesesLoadRound
      au Syntax * RainbowParenthesesLoadSquare
      au Syntax * RainbowParenthesesLoadBraces
    augroup END
  endif
" }}}

" ################### 快速导航 ###################

" nerdtree nerdtreetabs {{{
  if has_key(g:plugs, 'nerdtree')
    map <leader>n :NERDTreeToggle<CR>
    let NERDTreeHighlightCursorline=1
    let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', 'build/', '__pycache__' ]
    "close vim if the only window left open is a NERDTree
    " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
    " s/v 分屏打开文件
    let g:NERDTreeMapOpenSplit = 's'
    let g:NERDTreeMapOpenVSplit = 'v'
    " fix Nerdtree ^G before folder and file names OSX terminal vim
    let g:NERDTreeNodeDelimiter = "\u00a0"


    " nerdtreetabs
    " map <Leader>n <plug>NERDTreeTabsToggle<CR>
    " 打开tab同步
    let g:nerdtree_tabs_synchronize_view=1
    let g:nerdtree_tabs_synchronize_focus=1
    " 是否自动开启nerdtree
    " thank to @ListenerRi, see https://github.com/wklken/k-vim/issues/165
    let g:nerdtree_tabs_open_on_console_startup=0
    let g:nerdtree_tabs_open_on_gui_startup=0
  endif
" }}}

" 标签导航
" tagbar {{{
  if has_key(g:plugs, 'tagbar')
    nmap <F9> :TagbarToggle<CR>
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_show_visibility = 1
    let g:tagbar_show_linenumbers = -1
    " for ruby
    let g:tagbar_type_ruby = {
        \ 'kinds' : [
            \ 'm:modules',
            \ 'c:classes',
            \ 'd:describes',
            \ 'C:contexts',
            \ 'f:methods',
            \ 'F:singleton methods'
        \ ]
    \ }

    " go语言的tagbar配置
    " 1. install gotags 'go get -u github.com/jstemmer/gotags'
    " 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
    " for gotags. work with tagbar
    let g:tagbar_type_go = {
        \ 'ctagstype' : 'go',
        \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
        \ ],
        \ 'sro' : '.',
        \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
        \ },
        \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
        \ },
        \ 'ctagsbin'  : 'gotags',
        \ 'ctagsargs' : '-sort -silent'
    \ }
  endif
" }}}

" Buffer操作
" bufkill {{{
  if has_key(g:plugs, 'vim-bufkill')
    " close buffer
    nmap <Leader>BD :BD<CR>
    nmap <Leader>BB :BB<CR>
    nmap <Leader>BF :BF<CR>
    nmap <leader>BA :ba<cr>
  endif
" }}}

"------------------------------------------- end of configs --------------------------------------------
